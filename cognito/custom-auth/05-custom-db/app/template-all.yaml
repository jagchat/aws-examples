AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
    TableName:
        Type: String
        Default: DemoUserTable

Resources:
  DemoUserDbCrudApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev

  DemoUserDbGetAllLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DemoUserDbGetAllLambda
      Handler: get-all-items.handler
      Runtime: nodejs14.x
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Environment:
        Variables:
          DemoUserDbParamStoreConfig: !Sub '{"tablename": "${TableName}"}'          
      Events:
        DemoUserDbGetAllApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DemoUserDbCrudApi
            Path: /items
            Method: GET

  DemoUserDbGetItemByKeyLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DemoUserDbGetItemByKeyLambda
      Handler: get-item-by-key.handler
      Runtime: nodejs14.x
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Environment:
        Variables:
          DemoUserDbParamStoreConfig: !Sub '{"tablename": "${TableName}"}'          
      Events:
        DemoUserDbGetItemByKeyApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DemoUserDbCrudApi
            Path: /items/{userid}
            Method: GET

  DemoUserDbAddItemLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DemoUserDbAddItemLambda
      Handler: add-item.handler
      Runtime: nodejs14.x
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Environment:
        Variables:
          DemoUserDbParamStoreConfig: !Sub '{"tablename": "${TableName}"}'          
      Events:
        DemoUserDbAddItemApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DemoUserDbCrudApi
            Path: /items
            Method: POST
# facing issue: https://stackoverflow.com/questions/62346608/aws-lambda-rest-api-a-sibling-id-of-this-resource-already-has-a-variable-pa
# commenting for now

  # DemoUserDbDeleteItemLambda:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: DemoUserDbDeleteItemLambda
  #     Handler: delete-item.handler
  #     Runtime: nodejs14.x
  #     Timeout: 10
  #     Policies:
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref TableName
  #     Environment:
  #       Variables:
  #         DemoUserDbParamStoreConfig: !Sub '{"tablename": "${TableName}"}'          
  #     Events:
  #       DemoUserDbDeleteItemApiEvent:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref DemoUserDbCrudApi
  #           Path: /items/{UserId}
  #           Method: DELETE

  
  # DynamoDB Table
  # NOTE: The following works during deployment.  However, if table already exists, it would throw error
  DemoUserTableSpec:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Ref TableName
      #NOTE: do not include non-key atrributes in Attribute Definitions
      #ref: https://stackoverflow.com/questions/30866030/number-of-attributes-in-key-schema-must-match-the-number-of-attributes-defined-i
      AttributeDefinitions: 
        - 
          AttributeName: "UserId"
          AttributeType: "S"

      KeySchema: 
        - 
          AttributeName: "UserId"
          KeyType: "HASH"

      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      